// Cloudflare Worker –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –ê–Ω–¥–∏–∂–∞–Ω–µ
const MONITORING_URL = "https://monitoring.meteo.uz/ru/map/view/724";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
async function fetchAirQualityData() {
  try {
    const response = await fetch(MONITORING_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const html = await response.text();
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ PM 2.5 –∏ PM 10 –∏–∑ HTML
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ PM 2.5: –∏ PM 10:
    const pm25Match = html.match(/PM 2\.5:.*?(\d+\.?\d*)/);
    const pm10Match = html.match(/PM 10:.*?(\d+\.?\d*)/);
    
    if (!pm25Match || !pm10Match) {
      console.log('HTML content preview:', html.substring(0, 1000));
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ PM 2.5 –∏–ª–∏ PM 10');
    }
    
    const pm25 = parseFloat(pm25Match[1]);
    const pm10 = parseFloat(pm10Match[1]);
    
    return {
      PM25: pm25,
      PM10: pm10,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
function getAirQualityLevel(pm25, pm10) {
  if (pm25 <= 12 && pm10 <= 54) {
    return ["–•–æ—Ä–æ—à–æ", "üü¢"];
  } else if (pm25 <= 35.4 && pm10 <= 154) {
    return ["–£–º–µ—Ä–µ–Ω–Ω–æ", "üü°"];
  } else if (pm25 <= 55.4 && pm10 <= 254) {
    return ["–í—Ä–µ–¥–Ω–æ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö", "üü†"];
  } else if (pm25 <= 150.4 && pm10 <= 354) {
    return ["–í—Ä–µ–¥–Ω–æ", "üî¥"];
  } else if (pm25 <= 250.4 && pm10 <= 424) {
    return ["–û—á–µ–Ω—å –≤—Ä–µ–¥–Ω–æ", "üü£"];
  } else {
    return ["–û–ø–∞—Å–Ω–æ", "üü§"];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function getChangeEmoji(current, previous) {
  if (previous === null || previous === undefined) {
    return "";
  }
  
  if (current > previous) {
    return " üîº";
  } else if (current < previous) {
    return " üîΩ";
  } else {
    return " ‚è∫Ô∏è";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message, botToken, chatId) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessage(currentData, previousData) {
  const pm25 = currentData.PM25;
  const pm10 = currentData.PM10;
  
  const [qualityLevel, qualityEmoji] = getAirQualityLevel(pm25, pm10);
  
  const pm25Emoji = getChangeEmoji(pm25, previousData?.PM25);
  const pm10Emoji = getChangeEmoji(pm10, previousData?.PM10);
  
  const timestamp = new Date().toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  
  return `PM 2.5: ${pm25.toFixed(3)}${pm25Emoji} | PM 10: ${pm10.toFixed(3)}${pm10Emoji}

${qualityLevel} ${qualityEmoji}
–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${timestamp}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Worker
export default {
  async scheduled(event, env, ctx) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const currentData = await fetchAirQualityData();
    if (!currentData) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ KV
    const previousData = await env.AIR_DATA.get('previous', 'json');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ—Ä–æ–≥ 5.0)
    const threshold = 5.0;
    let shouldNotify = false;
    
    if (!previousData) {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
      shouldNotify = true;
      console.log('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    } else {
      const pm25Changed = Math.abs(currentData.PM25 - previousData.PM25) > threshold;
      const pm10Changed = Math.abs(currentData.PM10 - previousData.PM10) > threshold;
      
      if (pm25Changed || pm10Changed) {
        shouldNotify = true;
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      } else {
        console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (shouldNotify) {
      const message = formatMessage(currentData, previousData);
      const success = await sendTelegramMessage(
        message, 
        env.TELEGRAM_BOT_TOKEN, 
        env.TELEGRAM_CHAT_ID
      );
      
      if (success) {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await env.AIR_DATA.put('previous', JSON.stringify(currentData));
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
};
