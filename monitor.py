#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –ê–Ω–¥–∏–∂–∞–Ω–µ
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ PM 2.5 –∏ PM 10 —Å —Å–∞–π—Ç–∞ monitoring.meteo.uz
"""

import os
import json
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import sys

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_URL = "https://monitoring.meteo.uz/ru/map/view/724"

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
DATA_FILE = "previous_data.json"


def fetch_air_quality_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ —Å —Å–∞–π—Ç–∞"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(MONITORING_URL, headers=headers, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ PM 2.5 –∏ PM 10
        data = {}
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è–º–∏
        concentrations = soup.find_all('li')
        
        for item in concentrations:
            text = item.get_text(strip=True)
            
            if 'PM 2.5:' in text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ PM 2.5
                value = text.split('PM 2.5:')[1].strip().split('¬µg/m¬≥')[0].strip()
                data['PM25'] = float(value)
            
            elif 'PM 10:' in text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ PM 10
                value = text.split('PM 10:')[1].strip().split('¬µg/m¬≥')[0].strip()
                data['PM10'] = float(value)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        date_elem = soup.find(text=lambda t: t and '–û–±–Ω–æ–≤–ª–µ–Ω–æ:' in t)
        if date_elem:
            data['timestamp'] = date_elem.split('–û–±–Ω–æ–≤–ª–µ–Ω–æ:')[1].strip()
        else:
            data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        if 'PM25' in data and 'PM10' in data:
            return data
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def load_previous_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    return None


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    if not TELEGRAM_CHAT_ID:
        print("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False


def get_air_quality_level(pm25, pm10):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞"""
    # –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö AQI
    if pm25 <= 12 and pm10 <= 54:
        return "üü¢ –•–æ—Ä–æ—à–æ", "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Ö–æ—Ä–æ—à–µ–µ"
    elif pm25 <= 35.4 and pm10 <= 154:
        return "üü° –£–º–µ—Ä–µ–Ω–Ω–æ", "–ü—Ä–∏–µ–º–ª–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞"
    elif pm25 <= 55.4 and pm10 <= 254:
        return "üü† –í—Ä–µ–¥–Ω–æ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø", "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    elif pm25 <= 150.4 and pm10 <= 354:
        return "üî¥ –í—Ä–µ–¥–Ω–æ", "–í—Å–µ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º"
    elif pm25 <= 250.4 and pm10 <= 424:
        return "üü£ –û—á–µ–Ω—å –≤—Ä–µ–¥–Ω–æ", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–¥–µ –∑–¥–æ—Ä–æ–≤—å—é"
    else:
        return "üü§ –û–ø–∞—Å–Ω–æ", "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è"


def format_message(current_data, previous_data=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    pm25 = current_data['PM25']
    pm10 = current_data['PM10']
    
    quality_level, quality_desc = get_air_quality_level(pm25, pm10)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pm25_emoji = get_change_emoji(pm25, previous_data.get('PM25') if previous_data else None)
    pm10_emoji = get_change_emoji(pm10, previous_data.get('PM10') if previous_data else None)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    timestamp_formatted = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    message = f"PM 2.5: {pm25:.3f}{pm25_emoji} | PM 10: {pm10:.3f}{pm10_emoji}\n\n"
    message += f"{quality_level} {quality_desc}\n"
    message += f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp_formatted}"
    
    return message


def get_change_emoji(current_value, previous_value):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    if previous_value is None:
        return ""
    
    if current_value > previous_value:
        return " üîº"
    elif current_value < previous_value:
        return " üîΩ"
    else:
        return " ‚è∫Ô∏è"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {datetime.now()}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = fetch_air_quality_data()
    
    if not current_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        sys.exit(1)
    
    print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: PM 2.5 = {current_data['PM25']}, PM 10 = {current_data['PM10']}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    previous_data = load_previous_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    data_changed = False
    
    if previous_data:
        if (abs(current_data['PM25'] - previous_data.get('PM25', 0)) > 5.0 or 
            abs(current_data['PM10'] - previous_data.get('PM10', 0)) > 5.0):
            data_changed = True
            print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚úì –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
    else:
        data_changed = True
        print("üìù –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if data_changed:
        message = format_message(current_data, previous_data)
        send_telegram_message(message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    save_data(current_data)
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    main()

